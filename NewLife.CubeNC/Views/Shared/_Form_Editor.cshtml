@model ValueTuple<String, Object, Type, String, Object>
@using NewLife;
@using NewLife.Cube
@using XCode;
@using XCode.Configuration;
@{
    var name = Model.Item1;
    var value = Model.Item2;
    var type = Model.Item3;
    var format = Model.Item4;
    var htmlAttributes = Model.Item5;
    if (type == null) type = value.GetType();
}
@switch (Type.GetTypeCode(type))
{
    case TypeCode.Boolean:
        @Html.ForBoolean(name, value.ToBoolean(), htmlAttributes)
        break;
    case TypeCode.DateTime:
        @Html.ForDateTime(name, value.ToDateTime(), format, htmlAttributes)
        break;
    case TypeCode.Decimal:
        @Html.ForDecimal(name, Convert.ToDecimal(value), format, htmlAttributes)
        break;
    case TypeCode.Single:
    case TypeCode.Double:
        @Html.ForDouble(name, value.ToDouble(), format, htmlAttributes)
        break;
    case TypeCode.Byte:
    case TypeCode.SByte:
    case TypeCode.Int16:
    case TypeCode.Int32:
    case TypeCode.Int64:
    case TypeCode.UInt16:
    case TypeCode.UInt32:
    case TypeCode.UInt64:
        if (type.IsEnum)
            @Html.ForEnum(name, value ?? 0.ChangeType(type))
        else
            @Html.ForInt(name, Convert.ToInt64(value), format, htmlAttributes)
        break;
    case TypeCode.String:
        @Html.ForString(name, value + "", 0, htmlAttributes)
        break;
    default:
        @Html.ForObject(name, value)
        break;
}